<html>
<head>
</head>
<script>

var markers = [];

function initialize() {


  var mapOptions = {
    zoom: 10,
    center: new google.maps.LatLng(39.72, -104.99),
    disableDefaultUI: true
  }
  var map = new google.maps.Map(document.getElementById("map-canvas-page"),
      mapOptions);

// Create marker for each user
      <% @users.each do |user| %>
          var marker = new google.maps.Marker({
            position: new google.maps.LatLng(<%= user.latitude %>, <%= user.longitude %>),
            map: map
          });
          marker.id = <%= user.id %>
          marker.setMap(map);
          markers.push(marker)
      <% end %>


  // Create the search box and link it to the UI element.
  var input = /** @type {HTMLInputElement} */(
      document.getElementById('pac-input'));


  var searchBox = new google.maps.places.SearchBox(
    /** @type {HTMLInputElement} */(input));

  // [START region_getplaces]
  // Listen for the event fired when the user selects an item from the
  // pick list. Retrieve the matching places for that item.
  google.maps.event.addListener(searchBox, 'places_changed', function() {
    $.ajax({
      url: '/locations',
      method: 'POST',
      data: {location: {address: $('#pac-input').val()}},
    })
    var places = searchBox.getPlaces();

    if (places.length == 0) {
      return;
    }
    for (var i = 0, marker; marker = markers[i]; i++) {
      marker.setMap(null);
    }

    // For each place, get the icon, place name, and location.
    var bounds = new google.maps.LatLngBounds();
    for (var i = 0, place; place = places[i]; i++) {
      var image = {
        url: place.icon,
        size: new google.maps.Size(71, 71),
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 34),
        scaledSize: new google.maps.Size(25, 25)
      };

      // Create a marker for each place.
      var marker = new google.maps.Marker({
        map: map,
        icon: image,
        title: place.name,
        position: place.geometry.location
      });

      markers.push(marker);

      bounds.extend(place.geometry.location);
    }

    map.fitBounds(bounds);
  });
  // [END region_getplaces]

  // Bias the SearchBox results towards places that are within the bounds of the
  // current map's viewport.
  google.maps.event.addListener(map, 'bounds_changed', function() {
    var bounds = map.getBounds();
    searchBox.setBounds(bounds);
  });

  google.maps.event.addListener(marker, 'click', function() {
   map.setZoom(8);
   map.setCenter(marker.getPosition());
 });



}


function changeMarker(id) {
  var icon = new google.maps.MarkerImage({ url:"http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=1|ffffff|c41200"});
  var marker = $.grep(markers, function(e){ return e.id == id; });
  debugger
  marker.setIcon(icon);
}

google.maps.event.addDomListener(window, 'load', initialize);



// var users = document.getElementsByClassName("user");
// for(var i = 0; i < users.length; i++ ) {
//   users[i].addEventListener("mouseover", changeMarker(users[i].id), false);
// }


</script>
<body>
  <div class="col-md-4">
    <input id="pac-input" class="controls" type="text" placeholder="Find players in your area...">
    <br><br>
    <% @users.each do |user| %>
      <div id="<%= user.id %>" class="user" onmouseover="changeMarker(<%= user.id %>)">
        <%= link_to(user.full_name, user_path(user)) %><br>
        <%= user.address %><br>
        <%= user.email %><br><br>
      </div>
    <% end %>
  </div>
  <div class="col-md-8">
    <div id="map-canvas-page"></div>
  </div>

</body>
</html>
